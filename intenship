# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler

# Load the dataset
# Replace 'bank_data.csv' with your dataset file
data = pd.read_csv("bank_data.csv")

# Initial exploration
print("Dataset Info:")
print(data.info())

# Data preprocessing
# Encode categorical variables
label_encoder = LabelEncoder()
data['Gender'] = label_encoder.fit_transform(data['Gender'])  # Male: 1, Female: 0
data = pd.get_dummies(data, columns=['Geography'], drop_first=True)  # Geography encoding

# Creating a new feature for 'Zero Bank Balance'
data['Zero_Balance'] = (data['Balance'] == 0).astype(int)

# Define features (X) and target (y)
X = data.drop(['Exited', 'CustomerId', 'Surname'], axis=1)  # Drop irrelevant columns
y = data['Exited']

# Splitting the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Handle imbalanced dataset
# Using random over-sampling
ros = RandomOverSampler(random_state=42)
X_train_ros, y_train_ros = ros.fit_resample(X_train, y_train)

# Using random under-sampling
rus = RandomUnderSampler(random_state=42)
X_train_rus, y_train_rus = rus.fit_resample(X_train, y_train)

# Standardize the data
scaler = StandardScaler()
X_train_ros = scaler.fit_transform(X_train_ros)
X_train_rus = scaler.fit_transform(X_train_rus)
X_test = scaler.transform(X_test)

# Build and train the SVM model
svm_model = SVC(kernel='rbf', random_state=42)

# Hyperparameter tuning with GridSearchCV
param_grid = {
    'C': [0.1, 1, 10],
    'gamma': [1, 0.1, 0.01],
    'class_weight': [None, 'balanced']
}
grid_search = GridSearchCV(estimator=svm_model, param_grid=param_grid, scoring='recall', cv=5)
grid_search.fit(X_train_ros, y_train_ros)

# Best model from GridSearch
best_model = grid_search.best_estimator_
print("\nBest Parameters:", grid_search.best_params_)

# Evaluate the model
y_pred = best_model.predict(X_test)
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
